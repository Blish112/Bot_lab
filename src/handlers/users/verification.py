from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from data.config_reader import code_words, list_code_word
from db.querys.group_query import get_group
from db.querys.user_query import (
    get_user_try_to_acept, 
    upd_user_try_to_acept, 
    get_user_group,
    upd_user_group,
    upd_user_is_accept,
    upd_user_is_baned
)

from keyboard.common_keyboard import common_keyboard
from keyboard.verification_keyboard import(
    keyboard_verification_restart,
    keyboard_verification, 
    keyboard_start
)

# –ö–ª–∞—Å—Å —Ñ–æ—Ä–º—ã –¥–ª—è –≤–∫–ª/–≤—ã–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
class Form(StatesGroup):
    number_of_group = State()
    codes_word = State()
    start_is_pressed = State()

router = Router()

# –ë–ª–æ–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
@router.message(F.text.lower() == '–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è üîê')
async def command_verificator_handler(message: Message, state: FSMContext) -> None:
    await state.set_state(Form.start_is_pressed)
    
    text_verif_start = (
        "–í–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.\n\n"
        "–û—Ç –≤–∞—Å –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ ü§´\n"
    )
    
    text_verif_return = (
        "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º.üî•\n\n"
        "–í–∞–º –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ ü§´\n"
    )
    
    user_id = message.from_user.id
    user_group_id = await get_user_group(user_id)
    
    if user_group_id is not None:
        await state.update_data(number_of_group=str(user_group_id.id))
        
        await message.answer(
            text=text_verif_return, 
            reply_markup=keyboard_verification_restart
        )
    else:
        await message.answer(
            text=text_verif_start, 
            reply_markup=keyboard_verification
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –µ—Å–ª–∏ –Ω–µ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç
@router.message(Form.start_is_pressed)
async def start_is_not_pressed_hendler(message: Message, state: FSMContext) -> None:
    await message.answer(
        text='<b>–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É –°—Ç–∞—Ä—Ç ‚≠êÔ∏è</b>\n\n',
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard_verification
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
@router.message(Form.number_of_group, F.text.casefold().regexp(r'^\d{3}-\d{2}[–º–ú]'))
async def regexp_grop_num_hendler(message: Message, state: FSMContext) -> None:
    grouop = await get_group(message.text) 
    if grouop is not None:
        await state.update_data(number_of_group=str(grouop.id))
        await state.set_state(Form.codes_word)
        
        await upd_user_group(message.from_user.id, message.text)
        
        await message.answer(
            text='–û—Ç–ª–∏—á–Ω–æ!\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ.',
            reply_markup=keyboard_start
        )
    else:
        await state.clear()
        await message.answer(
            text=f'–¢–∞–∫–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ üò¢',
            reply_markup=common_keyboard
        )
    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–µ–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã 
@router.message(Form.number_of_group)
async def regexp_grop_num(message: Message) -> None:
    await message.reply(
        text=f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ',
        reply_markup=common_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞, –µ—Å–ª–∏ —Ç–∞–∫–æ–µ —Å–ª–æ–≤–∞ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∫–ª. —Å–ª–æ–≤ 
@router.message(Form.codes_word, F.text.in_(list_code_word))
async def code_word_in_list_hendler(message: Message, state: FSMContext) -> None:
    data = await state.update_data(codes_word=message.text)
    
    user_id = message.from_user.id
    user_try_accept = await get_user_try_to_acept(user_id)
    user_try_accept -= 1
    await upd_user_try_to_acept(user_id, user_try_accept)
    
    if (message.text == code_words[data['number_of_group']]):
        await upd_user_is_accept(user_id, True)
        await state.clear()
        await message.answer(
            text='–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!',
            reply_markup=common_keyboard
        )
    elif user_try_accept > 0:
        await message.reply(
            text=(
                '–ù–µ–≤–µ—Ä–Ω–æ! –≠—Ç–æ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã.\n'
                f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.\n\n'
                f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ø—ã—Ç–æ–∫: <b>{user_try_accept}</b>'
            ),
            parse_mode=ParseMode.HTML,
            reply_markup=common_keyboard
        )
    else:
        await state.clear()
        await upd_user_try_to_acept(user_id, user_try_accept)
        await upd_user_is_baned(user_id, True)
        await message.answer(
            '<b> –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</b>',
            show_alert=True
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–µ–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ 
@router.message(Form.codes_word)
async def code_word_out_of_list_hendler(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    user_try_accept = await get_user_try_to_acept(user_id)
    user_try_accept -= 1
    await upd_user_try_to_acept(user_id, user_try_accept)
    
    if user_try_accept > 0:
        await message.reply(
            text=(
                '–ù–µ–≤–µ—Ä–Ω–æ! –≠—Ç–æ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã\n'
                f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.\n\n'
                f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ø—ã—Ç–æ–∫: <b>{user_try_accept}</b>'
            ),
            parse_mode=ParseMode.HTML,
            reply_markup=common_keyboard
        )
    else:
        await state.clear()
        await upd_user_try_to_acept(user_id, user_try_accept)
        await upd_user_is_baned(user_id, True)
        await message.answer(
            '<b> –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</b>',
            show_alert=True
        )

# –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç
@router.callback_query(Form.start_is_pressed, F.data == 'start_pressed')
async def process_start_press(callback: CallbackQuery, state: FSMContext):
    await state.update_data(start_is_pressed='1')
    await state.set_state(Form.number_of_group)
    
    if callback.message.text != '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ 601-21–º':
        await callback.message.edit_text(
            text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ *601-21–º*',
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard_start
        )
    await callback.answer()
    
# –ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã
@router.callback_query(Form.start_is_pressed, F.data == 'restart_pressed')
async def process_start_press(callback: CallbackQuery, state: FSMContext):
    await upd_user_try_to_acept(callback.from_user.id, 3)
    await upd_user_is_accept(callback.from_user.id, False)
    
    await state.update_data(start_is_pressed='1')
    await state.set_state(Form.number_of_group)
    
    if callback.message.text != '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ 601-21–º':
        await callback.message.edit_text(
            text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ *601-21–º*',
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard_start
        )
    await callback.answer()
    
# –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
@router.callback_query(Form.start_is_pressed, F.data == 'continue_pressed')
async def process_start_press(callback: CallbackQuery, state: FSMContext):
    await state.update_data(start_is_pressed='1')
    await state.set_state(Form.codes_word)
    
    if callback.message.text != '–û—Ç–ª–∏—á–Ω–æ!\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ':
        await callback.message.edit_text(
            text='–û—Ç–ª–∏—á–Ω–æ!\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ',
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard_start
        )
    await callback.answer()

# –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç-–Ω–∞–∑–∞–¥
@router.callback_query(F.data == 'start_back_pressed')
async def process_start_back_press(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await command_verificator_handler(callback.message, state)
